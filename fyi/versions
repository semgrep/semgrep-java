File: semgrep-grammars/src/tree-sitter-java/LICENSE
Git repo name: tree-sitter-java
Latest commit in repo: ac14b4b1884102839455d32543ab6d53ae089ab7
Last change in file:
  commit 594f37a72daf46820a8d5b1b939f39e8aa3c6ce1
  gpg: Signature made Mon 27 Nov 2017 12:47:27 PM PST
  gpg:                using RSA key 4AEE18F83AFDEB23
  gpg: Good signature from "GitHub (web-flow commit signing) <noreply@github.com>" [full]
  Author: Ayman Nadeem <aymannadeem@github.com>
  Date:   Mon Nov 27 12:47:27 2017 -0800
  
      Update LICENSE
---
File: semgrep-grammars/src/tree-sitter-java/grammar.js
Git repo name: tree-sitter-java
Latest commit in repo: ac14b4b1884102839455d32543ab6d53ae089ab7
Last change in file:
  commit 4548c60eac1cecb2538bef5a1c4d0af2bfaa9eb4
  gpg: Signature made Tue 24 May 2022 01:33:30 AM PDT
  gpg:                using EDDSA key 798D9025125782CFE9D9371DCF8C71B58DA35D69
  gpg: Can't check signature: No public key
  Author: Raghav Shankar <raghav@deepsource.io>
  Date:   Tue May 24 14:03:30 2022 +0530
  
      Support sealed types
---
File: semgrep-grammars/src/semgrep-java/grammar.js
Git repo name: ocaml-tree-sitter-semgrep
Latest commit in repo: 0641f333798419e82b73d1baf31a9e2db6bcc01f
Last change in file:
  commit 2d2e3e70a2c6a979403dadefa3cfa32d9b89d87c
  gpg: Signature made Wed 31 Aug 2022 01:24:06 PM PDT
  gpg:                using RSA key C1930C5F9C9E0472DCF9ECC97D71116F505E5145
  gpg: Good signature from "Nathaniel Mote <nat@r2c.dev>" [ultimate]
  gpg:                 aka "Nathaniel Mote <nat@natmote.net>" [ultimate]
  Author: Nat Mote <nat@r2c.dev>
  Date:   Wed Aug 31 10:33:39 2022 -0700
  
      java: Parse semgrep extensions
      
      Currently we use pfff to parse Java patterns. Unfortunately, due to an
      issue I do not fully understand, it is unable to parse the pattern
      `public Foo() { }`, which is a standalone constructor with a privacy
      modifier. It looks like the grammar should allow this, and in fact it
      does allow patterns like `Foo() { }`. There is already a hack in place
      to address an LR(1) conflict, and I suspect that it is not working as
      desired. Rather than debug the issue with the pfff parser, I think it
      makes sense to switch to using the tree sitter parser as a fallback for
      pattern parsing like I recently did for JS/TS.
      
      This does the minimum to support the basic Semgrep pattern extensions
      (ellipsis in a few positions and tests verifying that metavariables
      parse), as well as the constructor case that does not work correctly in
      the pfff parser.
      
      Helps https://github.com/returntocorp/semgrep/issues/5558
      
      Test plan: Automated tests, plus testing of integration with semgrep
      (already done, but PR not yet up).
---
